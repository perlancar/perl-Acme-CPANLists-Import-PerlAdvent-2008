<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-13 20:26:08 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Twelve Intrepid Ibex pulling a load of open source</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod12.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-12</h1>
<h2 align="center">Twelve Intrepid Ibex pulling a load of open source</h2>
<h3 align="center">by Bill Ricker</h3>
<p>Recently, I gave a talk for the <a href="http://boston.pm.org">local PerlMongers</a> on "A Magic Number Mystery Tour of Use.perl.org journals with pack and unpack" (<a href="magic_pack_tour.pdf">pdf</a>). In summary, time() and time_t take all longint values, so some time is <span style="font-style: italic">011111111111</span> or <span style="font-style: italic">1234567890</span> or <span style="font-style: italic">Bill</span> o'clock. Earlier on Thursday was (net byte order) <span style="font-style: italic">IAGO</span> o'clock.</p>
<p>During Santa's flight, there are several interesting times:</p>
<pre>$ perl <a href="time_t2A.pl">time_t2A.pl</a> --sort | grep -E 'Dec 2[456]'
<span class="c"><center>&hellip;</center>
IRON  Wed Dec 24 15:03:42 2008 GMT . Wed Dec 24 10:03:42 2008 ET
ISIS  Thu Dec 25 08:50:27 2008 GMT . Thu Dec 25 03:50:27 2008 ET
ISLE  Thu Dec 25 09:03:01 2008 GMT . Thu Dec 25 04:03:01 2008 ET
ISMS  Thu Dec 25 09:07:31 2008 GMT . Thu Dec 25 04:07:31 2008 ET
ITCH  Fri Dec 26 02:36:56 2008 GMT . Thu Dec 25 21:36:56 2008 ET
ITEM  Fri Dec 26 02:45:33 2008 GMT . Thu Dec 25 21:45:33 2008 ET
<center>&hellip;</center></span></pre>
<p>While I could use <a href="http://www.thinkgeek.com/homeoffice/lights/a7c5/">The ThinkGeek Epoch Clock</a> to track this, it won't arrive by 6am today&hellip; And while it supports Roman numerals<sup><a href="#footnote_roman">1</a></sup>, which I don't need, it cannot display the time_t in the octal, hex, or ascii that I want; only hh:mm:ss is convertible.</p>
<p>We can churn out a quick prototype with a couple of CORE features: <tt>un-</tt><tt><span class="k">pack</span></tt>, <tt><span class="w">Term::Cap</span></tt>, and <tt><span class="w">Time::HiRes</span></tt>.</p>
<pre><span class="c"> 0.     1229079896
 1.    11120442530
 2.       49424558
 3.         'IBEX'
 4. Fri Dec 12 06:04:56 2008
 5. Fri Dec 12 11:04:56 2008</span></pre>
<p>But that's pretty dull in comparison to ThinkGeeks' lovely black monolith.</p>
<p><a href="http://www.thinkgeek.com/homeoffice/lights/a7c5"><image src="http://www.thinkgeek.com/images/products/additional/large/a7c5_thinkgeek_clock_front.jpg"></a></p>
<p><tt><a href="http://search.cpan.org/perldoc?Tk">Tk</a></tt> to the rescue! Or not. I would like to try a <tt>Tk</tt> gui on Perl, but playing with Perl and PerlAdvent on my laptop has been a challenge this week, since a kernel security patch disconfigured my wifi, so I was not optimistic. I eventually bit the bullet and upgraded to <a href="http://www.ubuntu.com/">Ubuntu Intrepid Ibex</a>, forgetting that this would break my <a href="../../2007/17/">PerlAdvent tools</a> and <a href="../../2006/5/">Ack</a>, since they were built against <tt>/bin/perl</tt> (5.8.x). Ubuntu Intrepid Ibex sensibly moved up to the year old Perl <a href="../../2007/19/">5.10</a>, and now nothing works except core modules.</p>
<p>Eventually, a quick <tt><span class="w">cpan</span> <span class="w">Tk</span></tt> lets me load this portable GUI library, and its tests begin popping-up a plethora of windows, a pleasant sign my luck is changing. Even better, the module comes with a <tt><span class="w">timer</span></tt> demo, which I was able to quickly wed to the CLI clock script&hellip;</p>
<p><img src="Screenshot-Clock-tk.png" style="float:right"></p>
<p>Not too bad!</p>
<p>Did you notice what time it is today? Coincidence? Or is it&hellip;</p>
<p><tt>Tk</tt> eye candy version:</p>
<a name="mod12tk.pl" id="mod12tk.pl"></a><h2><a href="mod12tk.pl">mod12tk.pl</a></h2><pre>
   1 #!/usr/local/bin/perl -w
   2 <span class="c"># based on Tk/demos/timer</span>
   3 
   4 <span class="k">use</span> <span class="w">Tk</span><span class="sc">;</span>
   5 <span class="k">sub </span><span class="m">tick</span><span class="sc">;</span>
   6 
   7 <span class="k">my</span> <span class="i">$MW</span> = <span class="w">MainWindow</span><span class="w">-&gt;new</span><span class="sc">;</span>
   8 <span class="i">$MW</span><span class="i">-&gt;bind</span><span class="s">(</span> <span class="q">'&lt;Control-c&gt;'</span> <span class="cm">=&gt;</span> \<span class="i">&amp;exit</span> <span class="s">)</span><span class="sc">;</span>
   9 <span class="i">$MW</span><span class="i">-&gt;bind</span><span class="s">(</span> <span class="q">'&lt;Control-q&gt;'</span> <span class="cm">=&gt;</span> \<span class="i">&amp;exit</span> <span class="s">)</span><span class="sc">;</span>
  10 
  11 <span class="c"># %tinfo:  the Timer Information hash.</span>
  12 <span class="c"># Key       Contents</span>
  13 <span class="c"># w         Reference to MainWindow.</span>
  14 <span class="c"># p         1 IIF paused.</span>
  15 <span class="c"># t0..t9         Value of -textvariables</span>
  16 <span class="k">my</span> <span class="s">(</span><span class="i">%tinfo</span><span class="s">)</span> = <span class="s">(</span> <span class="q">'w'</span> <span class="cm">=&gt;</span> <span class="i">$MW</span><span class="cm">,</span> <span class="q">'p'</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="s">)</span><span class="sc">;</span>
  17 
  18 <span class="k">my</span> <span class="i">$lines</span> = <span class="k">scalar</span> <span class="i">@</span>{ <span class="s">[</span> <span class="i">it</span><span class="s">(</span> <span class="k">time</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">]</span> }<span class="sc">;</span>
  19 <span class="k">my</span> <span class="i">@lines</span> = <span class="k">map</span> <span class="s">{</span>
  20     <span class="i">$MW</span><span class="i">-&gt;Label</span><span class="s">(</span>
  21         -<span class="w">relief</span>       <span class="cm">=&gt;</span> <span class="q">'raised'</span><span class="cm">,</span>
  22         -<span class="w">width</span>        <span class="cm">=&gt;</span> <span class="n">25</span><span class="cm">,</span>
  23         -<span class="w">textvariable</span> <span class="cm">=&gt;</span> \<span class="i">$tinfo</span>{ <span class="q">'t'</span> . <span class="i">$_</span> }<span class="cm">,</span>
  24         -<span class="w">foreground</span> <span class="cm">=&gt;</span> <span class="q">'green'</span><span class="cm">,</span>
  25         -<span class="w">background</span> <span class="cm">=&gt;</span> <span class="q">'black'</span><span class="cm">,</span>
  26     	<span class="s">)</span><span class="sc">;</span>
  27 	<span class="s">}</span> <span class="n">0</span> .. <span class="s">(</span> <span class="i">$lines</span> - <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
  28 <span class="i">$_</span><span class="i">-&gt;pack</span><span class="s">(</span><span class="s">)</span> <span class="k">for</span> <span class="i">@lines</span><span class="sc">;</span>
  29 
  30 <span class="i">$tinfo</span>{<span class="q">'w'</span>}<span class="i">-&gt;after</span><span class="s">(</span> <span class="n">100</span><span class="cm">,</span> \<span class="i">&amp;tick</span> <span class="s">)</span><span class="sc">;</span>
  31 <span class="w">MainLoop</span><span class="sc">;</span>
  32 
  33 <span class="k">exit</span><span class="sc">;</span>
  34 
<a name="tick"></a>  35 <span class="k">sub </span><span class="m">tick</span> <span class="s">{</span>
  36 
  37     <span class="c"># Update the counter every 50 milliseconds, or 5 hundredths of a second.</span>
  38 
  39     <span class="k">return</span> <span class="k">if</span> <span class="i">$tinfo</span>{<span class="q">'p'</span>}<span class="sc">;</span>
  40     <span class="k">my</span> <span class="i">@ry</span> = <span class="k">scalar</span><span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> ? <span class="i">bytes_to_nums</span><span class="s">(</span><span class="i">$ARGV</span>[<span class="n">0</span>]<span class="s">)</span> <span class="co">:</span> <span class="k">time</span><span class="sc">;</span>
  41     <span class="i">@tinfo</span>{ <span class="q">'t0'</span> .. <span class="q">&quot;t$lines&quot;</span> } = <span class="i">it</span><span class="s">(</span> <span class="i">@ry</span> <span class="s">)</span><span class="sc">;</span>
  42     <span class="i">$tinfo</span>{<span class="q">'w'</span>}<span class="i">-&gt;after</span><span class="s">(</span> <span class="n">50</span><span class="cm">,</span> \<span class="i">&amp;tick</span> <span class="s">)</span><span class="sc">;</span>
  43 <span class="s">}</span>    <span class="c"># end tick</span>
  44 
  45 <span class="c">#Reused code</span>
  46 <span class="c">#################################</span>
<a name="bytes_to_nums"></a>  47 <span class="k">sub </span><span class="m">bytes_to_nums</span> <span class="s">{</span>
  48     <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>
  49     <span class="c">## Probably has problems if given more than 4 chars?</span>
  50     <span class="k">my</span> <span class="i">$long</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="i">$string</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  51     <span class="k">return</span> <span class="i">$long</span><span class="sc">;</span>
  52 <span class="s">}</span>
  53 
<a name="nums_to_bytes"></a>  54 <span class="k">sub </span><span class="m">nums_to_bytes</span> <span class="s">{</span>
  55     <span class="k">my</span> <span class="i">$long</span> = <span class="k">shift</span><span class="sc">;</span>
  56     <span class="c">## Probably has problems if given more than 4 chars?</span>
  57     <span class="k">my</span> <span class="i">$string</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="i">$long</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  58     <span class="k">return</span> <span class="i">$string</span><span class="sc">;</span>
  59 <span class="s">}</span>
  60 
<a name="it"></a>  61 <span class="k">sub </span><span class="m">it</span> <span class="s">{</span>
  62     <span class="k">my</span> <span class="i">@Bufs</span><span class="sc">;</span>
  63     <span class="k">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span>
  65     <span class="k">my</span> <span class="i">$t</span> = <span class="k">shift</span><span class="sc">;</span>
  65 
  66     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  67     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%o&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>
  68     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%X&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># require 5.010; my $_ =</span>
  69     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span>
  70       <span class="k">scalar</span>
  71       <span class="k">do</span> <span class="s">{</span> <span class="k">local</span> <span class="i">$_</span> = <span class="i">nums_to_bytes</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span> <span class="q">s/[^[:print:]]/chr 0x3F/ge</span><span class="sc">;</span> <span class="q">&quot;'$_'&quot;</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span>
  72     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">localtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  73     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">gmtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  74 
  75     <span class="k">return</span> <span class="k">wantarray</span> ? <span class="i">@Bufs</span> <span class="co">:</span> \<span class="i">@Bufs</span><span class="sc">;</span>
  76 <span class="s">}</span>
</pre>
<p>The CLI prototype:</p>
<a name="mod12.pl" id="mod12.pl"></a><h2><a href="mod12.pl">mod12.pl</a></h2><pre>
   1 #! perl -l
   2 <span class="c">### Purpose - Find Words that are time_t's or vice versa</span>
   3 <span class="k">use</span> <span class="w">Time::HiRes</span> <span class="q">qw{usleep}</span><span class="sc">;</span>
   4 
   5 <span class="c"># from FAQ http://perldoc.perl.org/perlfaq8.html#How-do-I-clear-the-screen%3F</span>
   6 <span class="k">our</span> <span class="i">$cls</span><span class="sc">;</span>
   7 <span class="k">if</span> <span class="s">(</span> <span class="i">$^O</span> =~ <span class="q">/MSWin/</span> <span class="s">)</span> <span class="s">{</span>
   8     <span class="i">$cls</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span>
   9 <span class="s">}</span>
  10 <span class="k">else</span> <span class="s">{</span>
  11     <span class="k">use</span> <span class="w">Term::Cap</span><span class="sc">;</span>
  12     <span class="k">my</span> <span class="i">$terminal</span> = <span class="w">Term::Cap</span><span class="w">-&gt;Tgetent</span><span class="s">(</span> <span class="s">{</span> <span class="w">OSPEED</span> <span class="cm">=&gt;</span> <span class="n">9600</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span>
  13     <span class="k">my</span> <span class="i">$clear_string</span> = <span class="i">$terminal</span><span class="i">-&gt;Tputs</span><span class="s">(</span><span class="q">'cl'</span><span class="s">)</span><span class="sc">;</span>
  14     <span class="i">$cls</span> = <span class="i">$clear_string</span><span class="sc">;</span>
  15 <span class="s">}</span>
  16 
  17 <span class="c">## simulate</span>
  18 <span class="k">if</span> <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span>
  19     <span class="i">it</span><span class="s">(</span> <span class="i">bytes_to_nums</span><span class="s">(</span><span class="k">shift</span><span class="s">)</span> <span class="s">)</span> <span class="k">while</span> <span class="i">@ARGV</span><span class="sc">;</span>
  20     <span class="k">exit</span> <span class="n">1</span><span class="sc">;</span>
  21 <span class="s">}</span>
  22 
<a name="bytes_to_nums"></a>  23 <span class="k">sub </span><span class="m">bytes_to_nums</span> <span class="s">{</span>
  24     <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>
  25     <span class="c">## Probably has problems if given more than 4 chars?</span>
  26     <span class="k">my</span> <span class="i">$long</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="i">$string</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  27     <span class="k">return</span> <span class="i">$long</span><span class="sc">;</span>
  28 <span class="s">}</span>
  29 
  30 <span class="c">## run</span>
<a name="nums_to_bytes"></a>  31 <span class="k">sub </span><span class="m">nums_to_bytes</span> <span class="s">{</span>
  32     <span class="k">my</span> <span class="i">$long</span> = <span class="k">shift</span><span class="sc">;</span>
  33     <span class="c">## Probably has problems if given more than 4 chars?</span>
  34     <span class="k">my</span> <span class="i">$string</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="i">$long</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  35     <span class="k">return</span> <span class="i">$string</span><span class="sc">;</span>
  36 <span class="s">}</span>
  37 
<a name="it"></a>  38 <span class="k">sub </span><span class="m">it</span> <span class="s">{</span>
  39     <span class="k">my</span> <span class="i">@Bufs</span><span class="sc">;</span>
  40     <span class="k">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span>
  41     <span class="k">my</span> <span class="i">$t</span> = <span class="k">shift</span><span class="sc">;</span>
  42 
  43     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  44     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%o&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>
  45     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%X&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># require 5.010; my $_ =</span>
  46     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span>
  47       <span class="k">scalar</span>
  48       <span class="k">do</span> <span class="s">{</span> <span class="k">local</span> <span class="i">$_</span> = <span class="i">nums_to_bytes</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span> <span class="q">s/[^[:print:]]/chr 0x3F/ge</span><span class="sc">;</span> <span class="q">&quot;'$_'&quot;</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span>
  49     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">localtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  50     <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">gmtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  51 
  52     <span class="k">printf</span> <span class="q">&quot;%2d. %14s\n&quot;</span><span class="cm">,</span> <span class="i">$i</span>++<span class="cm">,</span> <span class="i">$_</span> <span class="k">for</span> <span class="i">@Bufs</span><span class="sc">;</span>
  53 <span class="s">}</span>
  54 
  55 <span class="k">while</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">{</span> <span class="k">print</span> <span class="i">$cls</span><span class="sc">;</span> <span class="i">it</span><span class="s">(</span> <span class="k">time</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span> <span class="i">usleep</span><span class="s">(</span><span class="n">5e5</span><span class="s">)</span><span class="sc">;</span> <span class="s">}</span>
</pre>
<p><a name="footnote_roman" id="footnote_roman"></a>1. Perl can do <a href="http://search.cpan.org/search?query=roman&mode=module">Roman Numerals</a> too.<br>
</p>
<div style="float: right; font-size: 10pt"><a href="mod12.pod">View Source (POD)</a></div><br />
</body>
</html>
