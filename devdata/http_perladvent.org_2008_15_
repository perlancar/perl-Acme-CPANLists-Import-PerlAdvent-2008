<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-25 00:23:40 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Merry forking() Christmas</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod15.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-15</h1>
<h2 align="center">Merry <tt><span class="k">fork</span></tt>()ing Christmas</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>Santa's a busy guy with a lot on his mind, and can never quite remember how to invoke <tt><span class="k">fork</span></tt>&hellip;"RTFM!" you say? Did I mention he was a busy guy? Instead, this cookie-thieving B&amp;E artist&mdash;just kidding Nick, honest!&mdash;relies upon a little bit of syntactic sugar known as <tt><a href="http://perlmonks.org/?node_id=59619">ForkBlock</a></tt>, which actually makes things a bit clearer too:</p>
<a name="mod15.pl" id="mod15.pl"></a><h2><a href="mod15.pl">mod15.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">ForkBlock</span> <span class="q">':all'</span><span class="sc">;</span>
   2 
   3 <span class="c">#'Dumb' so that the parent can carry-on afterwards &amp; show us another way</span>
   4 <span class="i">DumbFork</span> <span class="s">{</span>
   5     <span class="w">Parent</span> \<span class="i">&amp;manager</span><span class="cm">,</span>
   6     <span class="w">Child</span>  \<span class="i">&amp;worker</span>
   7 <span class="s">}</span><span class="sc">;</span>
   8 
   9 <span class="c">#OR</span>
  10 <span class="i">Fork</span> <span class="s">{</span>
  11     <span class="i">Parent</span> <span class="s">{</span>
  12       <span class="k">my</span> <span class="i">$kid</span> = <span class="i">$_</span>[<span class="n">0</span>]<span class="sc">;</span>   <span class="c">#Not meant to condone infanticide</span>
  13       <span class="k">local</span> <span class="i">$SIG</span>{<span class="w">ALRM</span>} = <span class="k">sub</span> <span class="s">{</span> <span class="k">kill</span><span class="s">(</span><span class="n">9</span><span class="cm">,</span> <span class="i">$kid</span><span class="s">)</span><span class="sc">;</span> <span class="k">sleep</span> <span class="n">2</span><span class="sc">;</span> <span class="k">exit</span> <span class="s">}</span><span class="sc">;</span>
  14       <span class="k">alarm</span><span class="s">(</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span>
  15 
  16       <span class="k">print</span> <span class="q">&quot;Work work work\n&quot;</span> <span class="k">while</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  17     <span class="s">}</span>
  18     <span class="i">Child</span> <span class="s">{</span>
  19       <span class="k">print</span> <span class="q">&quot;I want toys!\n&quot;</span> <span class="k">while</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  20     <span class="s">}</span>
  21 <span class="s">}</span><span class="sc">;</span>
  22 
  23 
<a name="manager"></a>  24 <span class="k">sub </span><span class="m">manager</span><span class="s">{</span>
  25   <span class="k">my</span> <span class="i">$employee</span> = <span class="i">$_</span>[<span class="n">0</span>]<span class="sc">;</span>
  26   <span class="k">local</span> <span class="i">$SIG</span>{<span class="w">ALRM</span>} = <span class="k">sub</span> <span class="s">{</span> <span class="k">kill</span><span class="s">(</span><span class="n">9</span><span class="cm">,</span> <span class="i">$employee</span><span class="s">)</span><span class="sc">;</span> <span class="k">sleep</span> <span class="n">2</span><span class="sc">;</span> <span class="k">die</span> <span class="s">}</span><span class="sc">;</span>
  27   <span class="k">alarm</span><span class="s">(</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span>
  28 
  29   <span class="c">#Eval required to trap die, so signal handler can punt us,</span>
  30   <span class="c">#and we can fall out to second invocation form.</span>
  31   <span class="k">eval</span><span class="s">{</span> <span class="k">print</span> <span class="q">&quot;Work harder not smarter\n&quot;</span> <span class="k">while</span><span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">}</span><span class="sc">;</span>
  32 <span class="s">}</span>
  33 
<a name="worker"></a>  34 <span class="k">sub </span><span class="m">worker</span><span class="s">{</span>
  35   <span class="k">print</span> <span class="q">&quot;Work work work\n&quot;</span> <span class="k">while</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  36 <span class="s">}</span>
</pre>
<blockquote>Published 2008-12-24</blockquote>
<div style="float: right; font-size: 10pt"><a href="mod15.pod">View Source (POD)</a></div><br />
</body>
</html>
