<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-14 14:57:10 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: L-HO-HO-HO-st in translation</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod14.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-14</h1>
<h2 align="center">L-HO-HO-HO-st in translation</h2>
<h3 align="center">by Yanick Champoux</h3>
<p>There's no doubt about it, Santa has the glorious part of the job. Riding through the sky in his pimped-out reindeer sled, distributing gifts, reaping love, getting offered cookies and milk wherever he goes.</p>
<p>But this is only the bright, shiny tip of the North Pole Celebration Manufacturing Machine. There's a full year of labor that hides behind the Big Red One 24 hours of eggnog-scented glory. Thousands of unsung elves toil on hundred of tasks to make it happen.</p>
<p>One of those crucial tasks is the processing of all Christmas letters. After all, a big part of the magic of Christmas is how Santa Claus always bring the perfect gift (although the system can experience glitches from time to time, as the piles of tube socks I've collected through the years can attest to). There can be no cheating done there, no easy way out: each letter has to be parsed, processed, groked and entered in the big gift database.</p>
<p>If having to process a heap of mail the size of mount Everest wasn't enough, one has to factor in that those letters are written in all languages, and more often than not peppered with the wonderfully cute spelling mistakes that is the hallmark of six year olds all over the world.</p>
<p>As more and more scribe elves are cracking under the pressure, Santa decided that it was time to call the IT elves (and Perl) to the rescue. He gave them the task to come with a system that would take the transcript of a child's letter, figure out in which language it's written, run it through a quick spellcheck and then translate it to something all elves can read; which happens to be English, thanks to the Polar population's addiction to Sesame Street.</p>
<p>As it had been reported on the <a href="http://perladvent.pm.org/2008/4/">4th</a> and <a href="http://perladvent.pm.org/2008/13/">13th</a>, the IT elves already succeeded in implementing the first two steps of Santa's masterplan. The only part left to be done was the translation.</p>
<p>The module to do the job, <tt><a href="http://search.cpan.org/perldoc?Lingua::Translate">Lingua::Translate</a></tt>, was found pretty quickly. Since it provides an interface to online translation services, it was the perfect way to outsource the always-thorny problem of translation to someone more qualified for the job. But the question remained, which of the many available backends should be used? The distribution itself provides <tt>::Babelfish</tt> &amp; <tt>::SysTran</tt>, but <tt><a href="http://search.cpan.org/perldoc?Lingua::Translate::InterTran">Lingua::Translate::InterTran</a></tt> and <tt><a href="http://search.cpan.org/perldoc?Lingua::Translate::Google">Lingua::Translate::Google</a></tt> were also available. In a thoroughly unscientific effort to determine which was best, they had a sequilingual intern feed each the same sample letter:</p>

<table><tr><td colspan="2">

<p><span style="font-style: italic">Original letter:</span></p>
<pre><span class="c">  Cher Papa Noel,

  Comme cadeau, je veux un gros camion jaune.

  Bisoux,
  Martin</span></pre>

</td></tr><tr><td>
<p><span style="font-style: italic">Babelfish translation:</span></p>
<pre><span class="c">  Dear Papa Christmas,

  Like gift, I want a large truck yellow.

  Bisoux,
  Martin</span></pre>
</td><td>
<p><span style="font-style: italic">SysTran translation:</span></p>
<pre><span class="c">  
  # No SysTran server available.
  # Next year's wish list?
  #
  # &mdash;Glugg
</span>
</pre>
</td></tr>
<tr><td>
<p><span style="font-style: italic">Google translation:</span></p>
<pre><span class="c">  Dear Papa Noel, 

  As a gift, I want a big yellow truck. 

  Bisoux, 
  Martin</span></pre>
</td><td>
<p><span style="font-style: italic">InterTran translation:</span></p>
<pre><span class="c">  Dear Dad Noel, 

  As freebie, I want to a big lorry yellow. 

  Bison, 
  Martial</span></pre>
</td></tr></table>
<p>Of course, the number of languages each service supports is also important, but unfortunately the implementations of the method intended to report this information <tt><span class="w">available</span></tt> varied in quality. More frustratingly, this method required the creation of a disposable object in order to be checked. Nevertheless, based on this preliminary test run, the elves agreed that the Google backend looked like the most promising candidate, and plugged it in to the prototype script.</p>
<p>Rumors are that, next year, the IT staff is looking at hooking an optical character recognition engine into the script to do away with the re-typing of the letters. The postal elves can barely wait!</p>
<a name="mod14.pl" id="mod14.pl"></a><h2><a href="mod14.pl">mod14.pl</a></h2><pre>
   1 #!/usr/bin/perl 
   2 
   3 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   5 
   6 <span class="k">use</span> <span class="w">Text::SpellChecker</span><span class="sc">;</span>
   7 <span class="k">use</span> <span class="w">Lingua::Ident</span><span class="sc">;</span>
   8 <span class="k">use</span> <span class="w">Lingua::Translate</span><span class="sc">;</span>
   9 
  10 <span class="i">Lingua::Translate::config</span><span class="s">(</span> <span class="w">back_end</span> <span class="cm">=&gt;</span> <span class="q">'Google'</span> <span class="s">)</span><span class="sc">;</span>
  11 
  12 <span class="k">my</span> <span class="i">$letter</span> = <span class="k">join</span> <span class="q">''</span><span class="cm">,</span> &lt;&gt;<span class="sc">;</span>
  13 
  14 <span class="k">print</span> <span class="q">&quot;--- original letter:\n\n$letter\n\n&quot;</span><span class="sc">;</span>
  15 
  16 <span class="c"># TODO: add all the languages of the world. -- Glugg</span>
  17 <span class="k">my</span> <span class="i">$ident</span> = <span class="w">Lingua::Ident</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="k">map</span> <span class="q">&quot;data.$_&quot;</span> <span class="cm">=&gt;</span> <span class="q">qw/ en fr de /</span> <span class="s">)</span><span class="sc">;</span>
  18 
  19 <span class="k">my</span> <span class="i">$speller</span> = <span class="w">Text::SpellChecker</span><span class="w">-&gt;new</span><span class="s">(</span>
  20     <span class="w">text</span> <span class="cm">=&gt;</span> <span class="i">$letter</span><span class="cm">,</span>
  21     <span class="w">lang</span> <span class="cm">=&gt;</span> <span class="i">$ident</span><span class="i">-&gt;identity</span><span class="s">(</span><span class="i">$letter</span><span class="s">)</span><span class="cm">,</span>
  22 <span class="s">)</span><span class="sc">;</span>
  23 
  24 <span class="k">while</span> <span class="s">(</span> <span class="k">my</span> <span class="i">$word</span> = <span class="i">$speller</span><span class="i">-&gt;next_word</span> <span class="s">)</span> <span class="s">{</span>
  25 
  26     <span class="c"># just take the first suggestion,</span>
  27     <span class="c"># if there is one</span>
  28     <span class="k">my</span> <span class="s">(</span><span class="i">$corrected</span><span class="s">)</span> = <span class="i">$speller</span><span class="i">-&gt;suggestions</span><span class="sc">;</span>
  29     <span class="i">$speller</span><span class="i">-&gt;replace_all</span><span class="s">(</span> <span class="w">new_word</span> <span class="cm">=&gt;</span> <span class="i">$corrected</span> <span class="s">)</span> <span class="k">if</span> <span class="i">$corrected</span><span class="sc">;</span>
  30 <span class="s">}</span>
  31 
  32 <span class="k">print</span> <span class="q">&quot;--- corrected letter:\n\n&quot;</span><span class="cm">,</span> <span class="i">$speller</span><span class="i">-&gt;text</span><span class="cm">,</span> <span class="q">&quot;\n\n&quot;</span><span class="sc">;</span>
  33 
  34 <span class="k">my</span> <span class="i">$xl8r</span> = <span class="w">Lingua::Translate</span><span class="w">-&gt;new</span><span class="s">(</span> <span class="w">src</span> <span class="cm">=&gt;</span> <span class="i">$lang</span><span class="cm">,</span> <span class="w">dest</span> <span class="cm">=&gt;</span> <span class="q">'en'</span> <span class="s">)</span><span class="sc">;</span>
  35 
  36 <span class="k">print</span> <span class="q">&quot;--- translated letter:\n&quot;</span><span class="cm">,</span> <span class="i">$xl8r</span><span class="i">-&gt;translate</span><span class="s">(</span> <span class="i">$speller</span><span class="i">-&gt;text</span> <span class="s">)</span><span class="cm">,</span> <span class="q">&quot;\n\n&quot;</span><span class="sc">;</span>
  37 
<a name="__END__"></a>  38 <span class="k">__END__</span>
</pre>
<div style="float: right; font-size: 10pt"><a href="mod14.pod">View Source (POD)</a></div><br />
</body>
</html>
