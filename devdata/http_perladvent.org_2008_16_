<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-17 03:08:30 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Loads of Christmas cheer</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod16.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-16</h1>
<h2 align="center">Loads of Christmas cheer</h2>
<h3 align="center">by Jerrad Pierce</h3>
<blockquote>Apologies for calendar spottiness. Crummy term papers are finally in, and we now return you to your regularly scheduled programming.</blockquote>
<p><tt>DynaLoader</tt> makes the use of giant C libraries like the POSIX module a lot less hairy by only loading those functions you use/request, as opposed to only exposing those you request as is the case with a traditional import. That's interesting and all, but XS is so arcane. What about us mortals?</p>
<p>After reading <a href="../../2008/12/">Friday's</a> entry, I thought to myself that there ought to be some simple way of consolidating the examples into a single script that wouldn't load unnecessary code. At this point I rediscovered <tt><a href="http://search.cpan.org/perldoc?SelfLoader">SelfLoader</a></tt>, a pure perl analog to <tt>DynaLoader</tt>. <tt>SelfLoader</tt> provides deferred compilation (and some of the potential pitfalls that entails) of rarely used code and is ideal for large libraries; where, it seems to this author, it is unfortunately underused. This magic is achieved through <tt><span class="k">AUTOLOAD</span></tt> and string <tt><span class="k">eval</span></tt>, meaning we are also able to defer dependencies with no extra effort if they are <tt><span class="k">use</span></tt>d where needed e.g; lines 65 &amp; 74. An additional feature&mdash;of debatable merit some would argue&mdash;when using <tt>SelfLoader</tt> to provide for minimal loading and export of a library's functions is that because it uses <tt><span class="k">AUTOLOAD</span></tt>, one needn't bother with potentially long and cumbersome import lists.</p>
<p>A few other adjustments, and this single script is ready for primetime on both barebones servers and decked-out desktops alike.</p>
<p><img src="IHOP.png" style="float: right"></p>
<pre><span class="c">time_t: 1229475664
   oct: 11122047520
   hex: 49484F50
 ascii: 'IHOP'
 local: Tue Dec 16 20:01:04 2008
  zulu: Wed Dec 17 01:01:04 2008</span></pre>
<a name="mod16.pl" id="mod16.pl"></a><h2><a href="mod16.pl">mod16.pl</a></h2><pre>
   1 #! perl -ls
   2 <span class="c">### Purpose - Find Words that are time_t's or vice versa</span>
   3 <span class="k">use</span> <span class="w">vars</span> <span class="q">qw{$x $geometry}</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">SelfLoader</span><span class="sc">;</span>
   5 
   6 <span class="c">## just do it</span>
   7 <span class="k">if</span><span class="s">(</span> <span class="i">$x</span> <span class="s">)</span><span class="s">{</span>
   8   <span class="k">eval</span> <span class="q">&quot;use Tk&quot;</span><span class="sc">;</span>
   9   <span class="i">$geometry</span> ||= <span class="q">'+0+0'</span><span class="sc">;</span>
  10   <span class="i">GUI</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  11 <span class="s">}</span>
  12 <span class="k">else</span><span class="s">{</span>
  13   <span class="k">my</span> <span class="i">$fmt</span> = <span class="q">&quot;%stime_t: %i\n   oct: %s\n   hex: %s\n ascii: %s\n local: %s\n  zulu: %s\n&quot;</span><span class="sc">;</span>
  14 
  15   <span class="k">if</span> <span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> <span class="s">{</span>
  16     <span class="c">## simulate</span>
  17     <span class="k">printf</span> <span class="i">$fmt</span><span class="cm">,</span> <span class="q">''</span><span class="cm">,</span> <span class="i">it</span><span class="s">(</span> <span class="i">bytes_to_nums</span><span class="s">(</span><span class="k">shift</span><span class="s">)</span> <span class="s">)</span> <span class="k">while</span> <span class="i">@ARGV</span><span class="sc">;</span>
  18   <span class="s">}</span>
  19   <span class="k">else</span><span class="s">{</span>
  20     <span class="k">my</span> <span class="i">$cls</span> = <span class="i">CLI</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  21     <span class="k">printf</span> <span class="i">$fmt</span><span class="cm">,</span> <span class="i">$cls</span><span class="cm">,</span> <span class="i">it</span><span class="s">(</span> <span class="k">time</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="k">while</span> <span class="s">(</span> <span class="k">sleep</span><span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">)</span>
  22   <span class="s">}</span>
  23 <span class="s">}</span>
  24 
  25 
<a name="bytes_to_nums"></a>  26 <span class="k">sub </span><span class="m">bytes_to_nums</span> <span class="s">{</span>
  27   <span class="k">my</span> <span class="i">$string</span> = <span class="k">shift</span><span class="sc">;</span>
  28   <span class="c">## Probably has problems if given more than 4 chars?</span>
  29   <span class="k">my</span> <span class="i">$long</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="i">$string</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  30   <span class="k">return</span> <span class="i">$long</span><span class="sc">;</span>
  31 <span class="s">}</span>
  32 
<a name="nums_to_bytes"></a>  33 <span class="k">sub </span><span class="m">nums_to_bytes</span> <span class="s">{</span>
  34   <span class="k">my</span> <span class="i">$long</span> = <span class="k">shift</span><span class="sc">;</span>
  35   <span class="c">## Probably has problems if given more than 4 chars?</span>
  36   <span class="k">my</span> <span class="i">$string</span> = <span class="k">unpack</span><span class="s">(</span> <span class="q">&quot;a*&quot;</span><span class="cm">,</span> <span class="k">pack</span><span class="s">(</span> <span class="q">&quot;N*&quot;</span><span class="cm">,</span> <span class="i">$long</span> <span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
  37   <span class="k">return</span> <span class="i">$string</span><span class="sc">;</span>
  38 <span class="s">}</span>
  39 
<a name="it"></a>  40 <span class="k">sub </span><span class="m">it</span> <span class="s">{</span>
  41   <span class="k">my</span> <span class="i">@Bufs</span><span class="sc">;</span>
  42   <span class="k">my</span> <span class="i">$t</span> = <span class="k">shift</span><span class="sc">;</span>
  43   
  44   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  45   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%o&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>
  46   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span><span class="s">(</span> <span class="k">sprintf</span> <span class="q">&quot;%X&quot;</span><span class="cm">,</span> <span class="i">$t</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># require 5.010; my $_ =</span>
  47   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span>
  48     <span class="k">scalar</span>
  49       <span class="k">do</span> <span class="s">{</span> <span class="k">local</span> <span class="i">$_</span> = <span class="i">nums_to_bytes</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span> <span class="q">s/[^[:print:]]/chr 0x3F/ge</span><span class="sc">;</span> <span class="q">&quot;'$_'&quot;</span><span class="sc">;</span> <span class="s">}</span><span class="sc">;</span>
  50   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">localtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  51   <span class="k">push</span> <span class="i">@Bufs</span><span class="cm">,</span> <span class="k">scalar</span> <span class="k">gmtime</span><span class="s">(</span><span class="i">$t</span><span class="s">)</span><span class="sc">;</span>
  52   
  53   <span class="k">return</span> <span class="k">wantarray</span> ? <span class="i">@Bufs</span> <span class="co">:</span> \<span class="i">@Bufs</span><span class="sc">;</span>
  54 <span class="s">}</span>
  55 
  56 
<a name="__DATA__"></a>  57 <span class="k">__DATA__</span>
<a name="CLI"></a>  58 <span class="k">sub </span><span class="m">CLI</span><span class="s">{</span>
  59   <span class="k">my</span> <span class="i">$cls</span><span class="sc">;</span>
  60   <span class="c"># from FAQ http://perldoc.perl.org/perlfaq8.html#How-do-I-clear-the-screen%3F</span>
  61   <span class="k">if</span> <span class="s">(</span> <span class="i">$^O</span> =~ <span class="q">/MSWin/</span> <span class="s">)</span> <span class="s">{</span>
  62     <span class="i">$cls</span> = <span class="q">&quot;&quot;</span><span class="sc">;</span>
  63   <span class="s">}</span>
  64   <span class="k">else</span> <span class="s">{</span>
  65     <span class="k">use</span> <span class="w">Term::Cap</span><span class="sc">;</span>
  66     <span class="k">my</span> <span class="i">$terminal</span> = <span class="w">Term::Cap</span><span class="w">-&gt;Tgetent</span><span class="s">(</span> <span class="s">{</span> <span class="w">OSPEED</span> <span class="cm">=&gt;</span> <span class="n">9600</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span>
  67     <span class="k">my</span> <span class="i">$clear_string</span> = <span class="i">$terminal</span><span class="i">-&gt;Tputs</span><span class="s">(</span><span class="q">'cl'</span><span class="s">)</span><span class="sc">;</span>
  68     <span class="i">$cls</span> = <span class="i">$clear_string</span><span class="sc">;</span>
  69   <span class="s">}</span>
  70   <span class="k">return</span> <span class="i">$cls</span><span class="sc">;</span>
  71 <span class="s">}</span>
  72 
<a name="GUI"></a>  73 <span class="k">sub </span><span class="m">GUI</span><span class="s">{</span>
  74   <span class="k">use</span> <span class="w">Tk</span><span class="sc">;</span>
  75   <span class="c"># based on Tk/demos/timer</span>
  76   
  77   <span class="k">my</span> <span class="i">$MW</span> = <span class="w">MainWindow</span><span class="w">-&gt;new</span><span class="sc">;</span>
  78 
  79   <span class="i">$MW</span><span class="i">-&gt;overrideredirect</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  80   <span class="i">$MW</span><span class="i">-&gt;geometry</span><span class="s">(</span><span class="i">$geometry</span><span class="s">)</span><span class="sc">;</span>
  81 
  82   <span class="i">$MW</span><span class="i">-&gt;bind</span><span class="s">(</span> <span class="q">'&lt;Control-c&gt;'</span> <span class="cm">=&gt;</span> \<span class="i">&amp;exit</span> <span class="s">)</span><span class="sc">;</span>
  83   <span class="i">$MW</span><span class="i">-&gt;bind</span><span class="s">(</span> <span class="q">'&lt;Control-q&gt;'</span> <span class="cm">=&gt;</span> \<span class="i">&amp;exit</span> <span class="s">)</span><span class="sc">;</span>
  84   
  85   <span class="c"># %tinfo:  the Timer Information hash.</span>
  86   <span class="c"># Key       Contents</span>
  87   <span class="c"># w         Reference to MainWindow.</span>
  88   <span class="c"># p         1 IIF paused.</span>
  89   <span class="c"># t0..t9         Value of -textvariables</span>
  90   <span class="k">my</span> <span class="s">(</span><span class="i">%tinfo</span><span class="s">)</span> = <span class="s">(</span> <span class="q">'w'</span> <span class="cm">=&gt;</span> <span class="i">$MW</span><span class="cm">,</span> <span class="q">'p'</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> <span class="s">)</span><span class="sc">;</span>
  91   
  92   <span class="k">my</span> <span class="i">$lines</span> = <span class="k">scalar</span> <span class="i">@</span>{ <span class="s">[</span> <span class="i">it</span><span class="s">(</span> <span class="k">time</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">]</span> }<span class="sc">;</span>
  93   <span class="k">my</span> <span class="i">@lines</span> = <span class="k">map</span> <span class="s">{</span>
  94     <span class="i">$MW</span><span class="i">-&gt;Label</span><span class="s">(</span>
  95 	       -<span class="w">relief</span>       <span class="cm">=&gt;</span> <span class="q">'raised'</span><span class="cm">,</span>
  96 	       -<span class="w">width</span>        <span class="cm">=&gt;</span> <span class="n">25</span><span class="cm">,</span>
  97 	       -<span class="w">textvariable</span> <span class="cm">=&gt;</span> \<span class="i">$tinfo</span>{ <span class="q">'t'</span> . <span class="i">$_</span> }<span class="cm">,</span>
  98 	       -<span class="w">foreground</span> <span class="cm">=&gt;</span> <span class="q">'green'</span><span class="cm">,</span>
  99 	       -<span class="w">background</span><span class="cm">=&gt;</span><span class="q">'black'</span><span class="cm">,</span>
 100 	      <span class="s">)</span><span class="sc">;</span>
 101   <span class="s">}</span> <span class="n">0</span> .. <span class="s">(</span> <span class="i">$lines</span> - <span class="n">1</span> <span class="s">)</span><span class="sc">;</span>
 102   <span class="i">$_</span><span class="i">-&gt;pack</span><span class="s">(</span><span class="s">)</span> <span class="k">for</span> <span class="i">@lines</span><span class="sc">;</span>
 103   
 104 
<a name="tick"></a> 105   <span class="k">sub </span><span class="m">tick</span> <span class="s">{</span>
 106     <span class="c"># Update the counter every 50 milliseconds, or 5 hundredths of a second.</span>
 107     
 108     <span class="k">return</span> <span class="k">if</span> <span class="i">$tinfo</span>{<span class="q">'p'</span>}<span class="sc">;</span>
 109     <span class="k">my</span> <span class="i">@ry</span> = <span class="k">scalar</span><span class="s">(</span><span class="i">@ARGV</span><span class="s">)</span> ? <span class="i">bytes_to_nums</span><span class="s">(</span><span class="i">$ARGV</span>[<span class="n">0</span>]<span class="s">)</span> <span class="co">:</span> <span class="k">time</span><span class="sc">;</span>
 110     <span class="i">@tinfo</span>{ <span class="q">'t0'</span> .. <span class="q">&quot;t$lines&quot;</span> } = <span class="i">it</span><span class="s">(</span> <span class="i">@ry</span> <span class="s">)</span><span class="sc">;</span>
 111     <span class="i">$tinfo</span>{<span class="q">'w'</span>}<span class="i">-&gt;after</span><span class="s">(</span> <span class="n">50</span><span class="cm">,</span> \<span class="i">&amp;tick</span> <span class="s">)</span><span class="sc">;</span>
 112   <span class="s">}</span>
 113 
 114   <span class="i">$tinfo</span>{<span class="q">'w'</span>}<span class="i">-&gt;after</span><span class="s">(</span> <span class="n">100</span><span class="cm">,</span> \<span class="i">&amp;tick</span> <span class="s">)</span><span class="sc">;</span>
 115   <span class="w">MainLoop</span><span class="sc">;</span>
 116   
 117   <span class="k">exit</span><span class="sc">;</span>
 118 <span class="s">}</span>
 119 
<a name="__END__"></a> 120 <span class="k">__END__</span>
 121 
 122 <span class="pd">=pod</span>
 123 
 124 <span class="pd">=head1 NAME</span>
 125 
 126 <span class="pd">time_t2X - display time_t in a variety of formats</span>
 127 
 128 <span class="pd">=head1 SYNOPSIS</span>
 129 
 130 <span class="pd">time_t2X [B&lt;-x&gt;] [B&lt;-geometry&gt;=I&lt;geometry&gt;] [I&lt;word&gt;]</span>
 131 
 132 <span class="pd">=head1 DESCRIPTION</span>
 133 
 134 <span class="pd">Display a live clock, or the time(s) corresponding to 4-character string(s)</span>
 135 <span class="pd">provided on the command line.</span>
 136 
 137 <span class="pd">=head1 OPTIONS</span>
 138 
 139 <span class="pd">=over</span>
 140 
 141 <span class="pd">=item -x</span>
 142 
 143 <span class="pd">Graphical display</span>
 144 
 145 <span class="pd">=item -geometry</span>
 146 
 147 <span class="pd">Geometry of graphical display</span>
 148 
 149 <span class="pd">=back</span>
 150 
 151 <span class="pd">=head1 AUTHORS</span>
 152 
 153 <span class="pd">Bill 'N1VUX' Ricker, with alterations by Jerrad Pierce</span>
 154 
 155 <span class="pd">=end</span>
</pre>
<div style="float: right; font-size: 10pt"><a href="mod16.pod">View Source (POD)</a></div><br />
</body>
</html>
