<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.08 (Pod::Simple 3.04, Perl::Tidy 20070508) on 2008-12-03 22:36:14 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Sleighing big numbers</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-03</h1>
<h2 align="center">Sleighing big numbers</h2>
<h3 align="center">by Bill Ricker</h3>
<h2>How Santa's IT Dept Saves Xmas (installment 2)</h2>
<h3>ATTN Comics Editors -- embargo Dec 3</h3>
<p>Santa's Route planning department and his payload planning department have to work together. He does not have time to search through multiple sacks at each chimney for the right items, the sleigh needs to be loaded with the precision of a FedEx or UPS truck - the next present must be next to hand. So load and route sequence are inextricably linked.</p>
<p>We suspect the sleigh and reindeer must have elven teleport abilities (whether wormhole or other transdimensional passage or some anti-relativistic quirk), since the Classical acceleration required to make all the required stops in a mere <tt><a href="../../2007/16/">30</a></tt> to 50 hours (from International Date Line (IDL) date start to IDL date stop) is horrendous, and the sonic booms would have been reported. Besides, his time on station at each stop improves dramatically if both up-the-chimney and roof to roof are instantaneous.</p>
<p>Let's check the calculations on <tt><a href="http://www.nollaig.com/scientific%20santa.html">Scientific Santa</a></tt>'s explanation. Absolute precision is not required for optimization, they need plan and replan &hellip; <span style="font-weight: bold">fast</span>; and "the best" is the enemy of good enough. So the Elven planners and their Neptunian outsourced IT staff use <tt><a href="http://search.cpan.org/search?module=Math::BigApprox">Math::BigApprox</a></tt> as an electronic sliderule for back-of-the envelope estimates when they fear blowout of floating point in their scripts (and <tt><a href="http://en.wikipedia.org/wiki/Frink">Frink</a></tt> for interactive use).</p>
<p>Following <tt><a href="http://www.nollaig.com/scientific%20santa.html">Scientific Santa</a></tt>, we start with the UNICEF world child census and deduce the physics equation by equation.</p>
<pre><span class="c">2.106000e+09 children per unicef
8.424000e+08 stops (children/2.5)
3.141593e+00 pi
3.986000e+03 Re Earth radius, miles. 
1.996570e+08 area sq. miles. 
5.790052e+07 populated area (dry 29%) sq. miles. 
6.873281e-02 area each, sq.miles / houses
2.621694e-01 mean distance, miles (sqrt area each)
2.208515e+08 mileage= houses * mean distance; miles
1.728000e+05 seconds total flight
2.051282e-04 Time between each, s
1.278076e+03 speed avg, miles/second
4.601074e+06 speed avg, miles/hr
4.601074e+06 speed avg, m/s (metric)
6.134765e+03 Mach - web page off x1000 !
3.000000e+08 C, speed of light, metric, m/s
1.458531e+02 ratio C:spd :: _:1
4.010885e+10 acceleration m/s/s
4.092740e+09 accel G's
1.914545e+12 Cargo grams
4.212000e+09 Cargo Lbs (2 Lbs/Child)
7.679021e+19 F=ma: Force, Newtons
1.7e+7153006998 traveling salesman, houses!</span></pre>
<p>We find the <tt><a href="http://www.nollaig.com/scientific%20santa.html">Scientific Santa</a></tt> slipped a decimal on Mach number, but otherwise holds up with assumptions given.</p>
<p>(Of course, out-sourcing delivery to various cultural gift bringers - Befanna, Three Kings/The Magi, Grandfather Winter, Pere Noel, St Basil, Christ Child, Ste Lucia, Father Christmas, Old Man Frost, Tio Nadal (Uncle Xmas), etc, greatly aids Santa's actual workload. And their team being able to do some households on St.Stephens Day or Three Kings Day or Solstice Eve or Lucia's Day also helps them all.)</p>
<p>Alas, even <span style="font-style: italic">calculating</span> the size of their un-structured Traveling Salesman problem as <tt><span class="i">Fact</span><span class="s">(</span><span class="i">$houses</span><span class="s">)</span>
</tt> takes 13 hours (47,212 seconds).</p>
<pre><span class="c">
fact 1e1 = 3628800 [0s]
fact 1e2 = 9.33262154e+157 [0s]
fact 1e3 = 4.0238726 e+2567 [0s]
fact 1e4 = 2.84626   e+35659 [0s]
fact 1e5 = 2.82423   e+456573 [1s]
fact 1e6 = 8.2639    e+5565708 [6s]
fact 1e7 = 1.202     e+65657059 [70s]
fact 1e8 = 1.62      e+756570556 [646s]
2.106000e+09     children
8.424000e+08     houses
traveling salesman
fact 842400000 = 1.6e+7153006998 [47212s]
=end pre</span></pre>
<p>This is hyperexponential, I would have expected 2 hours.</p>
<p>So they have to replace <tt>Math::BigApprox</tt>'s Fact() with <tt><a href="http://en.wikipedia.org/wiki/Stirling%27s_formula">Stirling's Approximation</a></tt> <img src="http://upload.wikimedia.org/math/5/9/7/597ea5ebaf3e7669de36494cd2554f3e.png"> when N is large enough that M:BA is barely keeping precision beyond order of magnitude anyway.</p>
<pre><span class="c">
fact 1e1 = 3598695.6187 [0s]
fact 1e2 = 9.32484763e+157 [0s]
fact 1e3 = 4.0235373 e+2567 [0s]
fact 1e4 = 2.846236  e+35659 [0s]
fact 1e5 = 2.82423   e+456573 [0s]
fact 1e6 = 8.2639    e+5565708 [0s]
fact 1e7 = 1.202     e+65657059 [0s]
fact 1e8 = 1.62      e+756570556 [0s]
fact 1e9  = 1        e+8565705523 [0s]
fact 1e10 = 2        e+95657055186 [0s]
fact 1e11 = 1        e+1056570551820 [0s]
fact 1e12 = 1359     e+11565705518100 [0s]
fact 1e13 = 1        e+125657055181000 [0s]
fact 1e14 = 1        e +1.35657055181 e+15 [0s]
2.106000e+09     children
8.424000e+08     houses
traveling salesman
fact 842400000 = 1.7e+7153006998 [0s]
=end pre</span></pre>
<p>This performs in constant time, which is pretty good.</p>
<p>1.7e+7_153_006_998. Ten to the 7 Billion. That's large. That many routes to optimize between is obviously not going to be precisely solved! Can the Eleven Planners and Neptunian IT find a fast enough good enough approximation in time to save Christmas?</p>
<p>(To Be Continued)</p>
<a name="mod3.pl" id="mod3.pl"></a><h2><a href="mod3.pl">mod3.pl</a></h2><pre>
   1 #! perl -lw
   2 
   3 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   5 
   6 <span class="c"># require Math::BigApprox;</span>
   7 <span class="k">use</span> <span class="w">Math::BigApprox</span> <span class="q">qw( c Prod )</span><span class="sc">;</span>
   8 
   9 <span class="c"># Pi -</span>
  10 <span class="c"># if it was BigFloat, I&#39;d use</span>
  11 <span class="c"># 3.14159_26535_89793_23846_26433_83279_50288_41971_69399;</span>
  12 <span class="c"># but with Math::BigApprox</span>
  13 <span class="k">my</span> <span class="i">$pi</span> = <span class="i">c</span><span class="s">(</span> <span class="n">355</span> / <span class="n">113</span> <span class="s">)</span><span class="sc">;</span> <span class="c"># is good enough, better than 22/7, better than 3.14159</span>
  14 
  15 <span class="c"># oddly,</span>
  16 <span class="c">#  $pi = c(sqrt sqrt (9**2 + 19**2/22)); # is also as good.  http://xkcd.com/217/</span>
  17 <span class="c"># http://use.perl.org/~n1vux/journal/32292</span>
  18 <span class="c"># http://use.perl.org/~n1vux/journal/32686</span>
  19 
  20 <span class="c"># Factorial -</span>
  21 <span class="c"># Override Factorial if Stirling approximation good enough</span>
  22 
<a name="Stirling"></a>  23 <span class="k">sub </span><span class="m">Stirling</span> <span class="s">{</span>
  24 
  25     <span class="c"># Stirlings approximate formula for Factorial</span>
  26     <span class="c"># http://en.wikipedia.org/wiki/Stirling%27s_formula</span>
  27     <span class="k">my</span> <span class="i">$x</span> = <span class="k">shift</span><span class="sc">;</span>
  28     <span class="k">my</span> <span class="i">$n</span> = <span class="k">ref</span> <span class="i">$x</span> <span class="k">eq</span> <span class="q">&quot;Math::BigApprox&quot;</span> ? <span class="i">$x</span> <span class="co">:</span> <span class="i">c</span><span class="s">(</span><span class="i">$x</span><span class="s">)</span><span class="sc">;</span>
  29     <span class="k">return</span> <span class="k">sqrt</span><span class="s">(</span> <span class="n">2</span> * <span class="i">$pi</span> * <span class="i">$n</span> <span class="s">)</span> * <span class="s">(</span> <span class="i">$n</span> / <span class="k">exp</span><span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">)</span>**<span class="i">$n</span><span class="sc">;</span>
  30 <span class="s">}</span>
  31 
<a name="Fact"></a>  32 <span class="k">sub </span><span class="m">Fact</span> <span class="s">{</span> <span class="k">return</span> <span class="i">$_</span>[<span class="n">0</span>] &gt; <span class="n">1e4</span> ? <span class="i">Stirling</span> <span class="k">shift</span> <span class="co">:</span> <span class="w">Math::BigApprox::Fact</span> <span class="k">shift</span><span class="sc">;</span> <span class="s">}</span>
  33 
  34 <span class="c"># -----------------------</span>
  35 
  36 <span class="k">my</span> <span class="i">$children</span> = <span class="i">c</span><span class="s">(</span> <span class="n">2.106</span> * <span class="n">10</span>**<span class="n">9</span> <span class="s">)</span><span class="sc">;</span>    <span class="c"># billion children aged under 18  UNICEF</span>
  37 
  38 <span class="c">#when? update?</span>
  39 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$children</span><span class="cm">,</span> <span class="q">q{children per unicef}</span><span class="sc">;</span>
  40 
  41 <span class="k">my</span> <span class="i">$houses</span> = <span class="i">$children</span> / <span class="n">2.5</span><span class="sc">;</span>         <span class="c">#Assume there are 2.5 children a house</span>
  42 
  43 <span class="k">printf</span> <span class="q">&quot;%e stops (children/2.5)\n&quot;</span><span class="cm">,</span>
  44   <span class="i">$houses</span><span class="sc">;</span>                            <span class="c"># 842 million stops on Christmas Eve</span>
  45 
  46 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$pi</span><span class="cm">,</span> <span class="q">q{pi}</span><span class="sc">;</span>
  47 
  48 <span class="k">my</span> <span class="i">$radius</span> = <span class="i">c</span><span class="s">(</span><span class="n">3_986</span><span class="s">)</span><span class="sc">;</span>                <span class="c"># earth, miles</span>
  49 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$radius</span><span class="cm">,</span> <span class="q">q{Re Earth radius, miles. }</span><span class="sc">;</span>
  50 
  51 <span class="k">my</span> <span class="i">$area</span> = <span class="s">(</span> <span class="i">$radius</span>**<span class="n">2</span> <span class="s">)</span> * <span class="i">$pi</span> * <span class="n">4</span><span class="sc">;</span>
  52 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$area</span><span class="cm">,</span> <span class="q">q{area sq. miles. }</span><span class="sc">;</span>
  53 
  54 <span class="i">$area</span> = <span class="i">$area</span> * <span class="n">0.29</span><span class="sc">;</span>                 <span class="c"># % dry</span>
  55 
  56 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$area</span><span class="cm">,</span> <span class="q">q{populated area (dry 29%) sq. miles. }</span><span class="sc">;</span>
  57 <span class="i">$area</span> = <span class="i">$area</span> / <span class="i">$houses</span><span class="sc">;</span>
  58 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$area</span><span class="cm">,</span> <span class="q">q{area each, sq.miles / houses}</span><span class="sc">;</span>
  59 
  60 <span class="k">my</span> <span class="i">$distPer</span> = <span class="k">sqrt</span> <span class="i">$area</span><span class="sc">;</span>
  61 
  62 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$distPer</span><span class="cm">,</span> <span class="q">q{mean distance, miles (sqrt area each)}</span><span class="sc">;</span>
  63 
  64 <span class="k">my</span> <span class="i">$dist</span> = <span class="i">$distPer</span> * <span class="i">$houses</span><span class="sc">;</span>
  65 
  66 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$dist</span><span class="cm">,</span> <span class="q">q{mileage= houses * mean distance; miles}</span><span class="sc">;</span>
  67 
  68 <span class="k">my</span> <span class="i">$time</span> = <span class="i">c</span><span class="s">(</span><span class="n">48</span><span class="s">)</span>    <span class="c"># hours IDL to IDL</span>
  69   * <span class="n">60</span> * <span class="n">60</span><span class="sc">;</span>        <span class="c"># sec</span>
  70 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$time</span><span class="cm">,</span> <span class="q">q{seconds total flight}</span><span class="sc">;</span>    <span class="c">#</span>
  71 
  72 <span class="k">my</span> <span class="i">$timePer</span> = <span class="i">$time</span> / <span class="i">$houses</span><span class="sc">;</span>                       <span class="c">#s</span>
  73 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$timePer</span><span class="cm">,</span> <span class="q">q{Time between each, s}</span><span class="sc">;</span> <span class="c">#</span>
  74 
  75 <span class="k">my</span> <span class="i">$speed</span> = <span class="i">$dist</span> / <span class="i">$time</span><span class="sc">;</span>                           <span class="c">#mi p s</span>
  76 
  77 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$speed</span><span class="cm">,</span> <span class="q">q{speed avg, miles/second}</span><span class="sc">;</span>    <span class="c">#</span>
  78 
  79 <span class="k">my</span> <span class="i">$milePerMetre</span> = <span class="n">1</span> / <span class="s">(</span>
  80     <span class="n">5_280</span>                                                <span class="c"># ft/mi</span>
  81       * <span class="n">12</span>                                               <span class="c"># in/ft</span>
  82       * <span class="n">2.54</span>                                             <span class="c"># cm/in</span>
  83       * <span class="n">1</span> / <span class="n">100</span>                                          <span class="c"># m/cm</span>
  84   <span class="s">)</span>                                                      <span class="c"># 1/(m/mi) = mi/m</span>
  85   <span class="sc">;</span>
  86 
  87 <span class="k">my</span> <span class="i">$speedMetric</span> = <span class="i">$speed</span> / <span class="i">$milePerMetre</span><span class="sc">;</span>                <span class="c"># mps</span>
  88 
  89 <span class="i">$speed</span> = <span class="i">$speed</span> * <span class="n">3600</span><span class="sc">;</span>                                  <span class="c">#MPH</span>
  90 
  91 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$speed</span><span class="cm">,</span> <span class="q">q{speed avg, miles/hr}</span><span class="sc">;</span>
  92 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$speed</span><span class="cm">,</span> <span class="q">q{speed avg, m/s (metric)}</span><span class="sc">;</span>
  93 
  94 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$speed</span> / <span class="n">750</span><span class="cm">,</span> <span class="q">q{Mach - web page off x1000 !}</span><span class="sc">;</span>
  95 
  96 <span class="c"># web page slipped 3 decimals here !!</span>
  97 
  98 <span class="k">my</span> <span class="i">$C</span> = <span class="n">3E8</span><span class="sc">;</span>    <span class="c"># speed of light, metric, mps</span>
  99 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$C</span><span class="cm">,</span> <span class="q">q{C, speed of light, metric, m/s}</span><span class="sc">;</span>
 100 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="n">1</span> / <span class="s">(</span> <span class="i">$speedMetric</span> / <span class="i">$C</span> <span class="s">)</span><span class="cm">,</span>
 101   <span class="q">q{ratio C:spd :: _:1}</span><span class="sc">;</span>    <span class="c"># speed/C, in mps</span>
 102 
 103 <span class="c">#########</span>
 104 <span class="c"># acceleration</span>
 105 <span class="c"># Article is off by at least a factor of two here, must accell and then decell.</span>
 106 <span class="c"># to average S, must accelerate to twice that and brake just as hard.</span>
 107 
 108 <span class="c"># Real math is</span>
 109 <span class="c"># R = 0.5 a*t**2. in this case,</span>
 110 <span class="c"># R = 2 * (0.5 a* (dt/2)**2)</span>
 111 <span class="c"># $dist = $a (timePer/2)**2</span>
 112 
 113 <span class="k">my</span> <span class="i">$accell</span> = <span class="i">$distPer</span> /     <span class="c"># miles</span>
 114   <span class="s">(</span>
 115     <span class="i">$milePerMetre</span> * <span class="s">(</span> <span class="s">(</span> <span class="i">$timePer</span> / <span class="n">2</span> <span class="s">)</span>**<span class="n">2</span> <span class="s">)</span>    <span class="c"># s.s</span>
 116   <span class="s">)</span><span class="sc">;</span>
 117 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$accell</span><span class="cm">,</span> <span class="q">q{acceleration m/s/s}</span><span class="sc">;</span>
 118 
 119 <span class="k">my</span> <span class="i">$g</span> = <span class="i">c</span><span class="s">(</span><span class="n">9.8</span><span class="s">)</span><span class="sc">;</span>                                <span class="c"># g=9.8m/s/s at surface</span>
 120 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$accell</span> / <span class="i">$g</span><span class="cm">,</span> <span class="q">q{accel G&#39;s}</span><span class="sc">;</span>
 121 
 122 <span class="c">##########</span>
 123 <span class="c">#  Cargo</span>
 124 
 125 <span class="k">my</span> <span class="i">$Cargo</span> = <span class="s">(</span> <span class="n">2</span> / <span class="n">2.2</span> <span class="s">)</span>                        <span class="c"># kg</span>
 126   * <span class="i">$children</span><span class="sc">;</span>
 127 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$Cargo</span> * <span class="n">1000</span><span class="cm">,</span> <span class="q">q{Cargo grams}</span><span class="sc">;</span>
 128 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$Cargo</span> * <span class="n">2.2</span><span class="cm">,</span>  <span class="q">q{Cargo Lbs (2 Lbs/Child)}</span><span class="sc">;</span>
 129 
 130 <span class="k">printf</span> <span class="q">&quot;%e %s\n&quot;</span><span class="cm">,</span> <span class="i">$Cargo</span> * <span class="i">$accell</span><span class="cm">,</span> <span class="q">q{F=ma: Force, Newtons}</span><span class="sc">;</span>
 131 
 132 <span class="c"># work</span>
 133 <span class="c"># food callories / 12 reindeer</span>
 134 
 135 <span class="k">print</span> <span class="i">Fact</span><span class="s">(</span><span class="i">$houses</span><span class="s">)</span><span class="cm">,</span> <span class="q">q{ traveling salesman, houses!}</span><span class="sc">;</span>
 136 
 137 <span class="c"># printf &quot;%e %s\n&quot;, c(1) &lt;&lt; 31, q{2^31 for comparison};</span>
 138 <span class="c"># 2.147484e+09 2^31 for comparison</span>
 139 <span class="c"># use POSIX qw(FLT_MAX DBL_MAX);</span>
 140 <span class="c"># printf &quot;%e %s\n&quot;, DBL_MAX, q{DBL_MAX for comparison};</span>
 141 <span class="c"># 1.797693e+308 DBL_MAX for comparison</span>
 142 <span class="c"># printf &quot;%e %s\n&quot;, FLT_MAX, q{FLT_MAX for comparison};</span>
 143 <span class="c"># 3.402823e+38 FLT_MAX for comparison</span>
 144 
</pre>
<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee"><p>Math::BigApprox certainly has its uses. While for most purposes 1.797693e+308 DBL_MAX for 32 bit perl is quite adequate, there are times when the extended range of Math::BigWhatever is needed but not the costly precision. With the Stirling approximation, it did let me compute factorial 10^30 which is sometimes necessary.</p>
</blockquote>
<div style="float: right; font-size: 10pt"><a href="mod3.pod">POD</a></div><br />
</body>
</html>
