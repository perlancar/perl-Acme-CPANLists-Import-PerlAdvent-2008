<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-23 13:26:12 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Egg substitute nog</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod22.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-22</h1>
<h2 align="center">Egg substitute nog</h2>
<h3 align="center">by Jerrad Pierce</h3>
<p>How often have you mangled a document with <span style="font-weight: bold">-i</span>nline editing like the first block in our code sample? That's what <span style="font-weight: bold">-i~</span> is for of course, but if you forget, the damage is done. Often, it may be possible to work around such difficulties as in blocks two and three, but what if you haven't stemmed or grepped all the text in the document to look for possible substr conflicts? You're in a rush and have no desire to muck with boundaries and look-aheads/behinds&hellip; You just just want a nice, simple, DWIMmy, explicit text replacement. <tt><a href="http://search.cpan.org/perldoc?Regexp::Subst::Parallel">Regexp::Subst::Parallel</a></tt> to the rescue. <tt>subst</tt> is a small parser that accepts multiple pairs of strings or regular expressions to locate, and a string or <span style="font-weight: bold">/e</span>xpr (n&eacute; <tt><span class="w">CODEREF</span></tt>) to replace matches with. The easy to mistype function then manages to perform the substitutions in a sane manner, regardless of order specified. This code lends itself to solving more complex problems, and can even serve as a basic templating engine.</p>
<a name="mod22.pl" id="mod22.pl"></a><h2><a href="mod22.pl">mod22.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">Regexp::Subst::Parallel</span><span class="sc">;</span>
   2 
   3 <span class="i">$_</span> = <span class="q">&quot;I like apples but I don't like oranges.\n&quot;</span><span class="sc">;</span>
   4 
   5 <span class="c">#Off-the-cuff implementation: I like bananas but I don't like pinebananas.</span>
   6 <span class="s">{</span>
   7   <span class="k">local</span> <span class="i">$_</span>=<span class="i">$_</span><span class="sc">;</span>
   8   <span class="q">s/orange/pineapple/g</span><span class="sc">;</span>
   9   <span class="q">s/apple/banana/g</span><span class="sc">;</span>
  10   <span class="k">print</span><span class="sc">;</span>
  11 <span class="s">}</span>
  12 
  13 <span class="c">#Carefully crafted regexp:    I like bananas but I don't like pineapples.</span>
  14 <span class="s">{</span>
  15   <span class="k">local</span> <span class="i">$_</span>=<span class="i">$_</span><span class="sc">;</span>
  16   <span class="q">s/orange/pineapple/g</span><span class="sc">;</span>
  17   <span class="q">s/\bapple/banana/g</span><span class="sc">;</span>
  18   <span class="k">print</span><span class="sc">;</span>
  19 <span class="s">}</span>
  20 
  21 <span class="c">#Considered ordering:         I like bananas but I don't like pineapples.</span>
  22 <span class="s">{</span>
  23   <span class="k">local</span> <span class="i">$_</span>=<span class="i">$_</span><span class="sc">;</span>
  24   <span class="q">s/apple/banana/g</span><span class="sc">;</span>
  25   <span class="q">s/orange/pineapple/g</span><span class="sc">;</span>
  26   <span class="k">print</span><span class="sc">;</span>
  27 <span class="s">}</span>
  28 
  29 <span class="c">#Care-free substitution:      I like bananas but I don't like pineapples.</span>
  30 <span class="s">{</span>
  31   <span class="k">local</span> <span class="i">$_</span>=<span class="i">$_</span><span class="sc">;</span>
  32   <span class="k">print</span> <span class="i">subst</span><span class="s">(</span><span class="i">$_</span><span class="cm">,</span>
  33 	      <span class="q">'orange'</span><span class="cm">=&gt;</span><span class="q">'pineapple'</span><span class="cm">,</span>
  34 	      <span class="q">'apple'</span> <span class="cm">=&gt;</span><span class="q">'banana'</span><span class="s">)</span><span class="sc">;</span>
  35 <span class="s">}</span>
</pre>
<div style="float: right; font-size: 10pt"><a href="mod22.pod">View Source (POD)</a></div><br />
</body>
</html>
