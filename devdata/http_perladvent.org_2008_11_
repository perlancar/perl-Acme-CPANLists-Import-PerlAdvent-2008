<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20071205) on 2008-12-12 00:57:29 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Should I expect help with my heating bill from Santa?</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod11.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-11</h1>
<h2 align="center">Should I expect help with my heating bill from Santa?</h2>
<h3 align="center">by David Westbrook</h3>
<p>One of the powers of Perl lays in <tt>CPAN</tt> and the vast functionality within. What's truly using under the hood when we're <tt><span class="k">use</span></tt>-ing any particular module? <tt><a href="http://search.cpan.org/perldoc?Module::ScanDeps">Module::ScanDeps</a></tt> answers precisely that by recursively delving into their innards. In even the simplest script, there's a lot of activity behind the scenes:</p>
<pre>
<span class="i">$ scandeps</span>.<span class="w">pl</span> <span class="k">-e</span> <span class="q">&#39;use strict; print &quot;Hello World&quot;&#39;</span>
<span class="q">&#39;Exporter&#39;</span>        <span class="cm">=&gt;</span> <span class="q">&#39;5.63&#39;</span><span class="cm">,</span>
<span class="q">&#39;AutoLoader&#39;</span>      <span class="cm">=&gt;</span> <span class="q">&#39;5.67&#39;</span><span class="cm">,</span>
<span class="q">&#39;Exporter::Heavy&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;5.63&#39;</span><span class="cm">,</span>
<span class="q">&#39;List::Util&#39;</span>      <span class="cm">=&gt;</span> <span class="q">&#39;1.19&#39;</span><span class="cm">,</span>
<span class="q">&#39;threads::shared&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;1.27&#39;</span><span class="cm">,</span>
<span class="q">&#39;XSLoader&#39;</span>        <span class="cm">=&gt;</span> <span class="q">&#39;0.10&#39;</span><span class="cm">,</span>
<span class="q">&#39;Scalar::Util&#39;</span>    <span class="cm">=&gt;</span> <span class="q">&#39;1.19&#39;</span><span class="cm">,</span>
</pre>

<p>Once a script (or module) starts using other modules, and those modules use other modules, there's an entire tree<sup><a href="#footnote_cpantesters">1</a></sup> of code in use which cause be from any number of authors. So, which of those authors have been <span style="font-style: italic">naughty</span>, and which have been <span style="font-style: italic">nice</span>?</p>
<p>First, we need to scan all the dependencies (lines 1-3). Next, we'll need to create (lines 5-11) a look-up hash of the module names to authors -- this we obtain from a copy of the <tt>02packages.details.txt.gz</tt> from a <tt>CPAN</tt> mirror.</p>
<p>With those two hashes in hand, we can loop over (line 14) the modules, exclude (line 15) the extraneous info, and note what other modules this module uses (line 16). And we also (lines 18-21) obtain the author for our look-up hash.</p>
<p>Now we can record an author as naughty if the module does neither <tt><span class="k">use</span> <span class="w">strict</span></tt> nor <tt><span class="k">use</span> <span class="w">warnings</span></tt>, and as nice if the modules does both. (Just one is neutral.) For the lists, any author with any module with neither is naughty, and any non-naughty author with at least one with both is nice.</p>
<p>Using this against a 'random' module:</p>
<pre>
<span class="i">$ perl</span> <span class="w">mod11</span>.<span class="w">pl</span> /<span class="k">my</span><span class="q">/path/</span><span class="w">Pod</span>/<span class="w">Advent</span>.<span class="w">pm</span>
</pre>

<p>We obtain the following:</p>
<pre><span class="c">Authors that have been nice (Red Ryder):
        JDHEDDEN
        DAVIDRW
        CHORNY
        GBARR

Authors that have been naughty (coal):
        FERREIRA
        GAAS
        RGARCIA
        HANK
        unknown
        SAPER
        ILYAZ
        ARANDAL</span></pre>
<p>Finally, a year without coal for me! :)</p>
<a name="mod11.pl" id="mod11.pl"></a><h2><a href="mod11.pl">mod11.pl</a></h2><pre>
   1 <span class="k">use</span> <span class="w">Module::ScanDeps</span><span class="sc">;</span>
   2 
   3 <span class="k">my</span> <span class="i">$hash_ref</span> = <span class="i">scan_deps</span><span class="s">(</span> <span class="i">@ARGV</span> <span class="s">)</span><span class="sc">;</span> <span class="c"># shorthand; assume recurse == 1</span>
   4 
   5 <span class="k">open</span> <span class="w">FILE</span><span class="cm">,</span> <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="q">&#39;02packages.details.txt&#39;</span> <span class="k">or</span> <span class="k">die</span> <span class="q">&#39;need package info file&#39;</span><span class="sc">;</span>
   6 <span class="k">my</span> <span class="i">%mod2author</span> = <span class="k">map</span> <span class="s">{</span>
   7 		<span class="k">my</span> <span class="s">(</span><span class="i">$m</span><span class="cm">,</span><span class="i">$v</span><span class="cm">,</span><span class="i">$d</span><span class="s">)</span> = <span class="k">split</span> <span class="q">&#39; &#39;</span><span class="cm">,</span> <span class="i">$_</span><span class="sc">;</span>
   8 		<span class="k">my</span> <span class="i">$author</span> = <span class="s">(</span><span class="k">split</span> <span class="q">&#39;/&#39;</span><span class="cm">,</span> <span class="i">$d</span><span class="s">)</span>[<span class="n">2</span>]<span class="sc">;</span>
   9 		<span class="i">$m</span> <span class="cm">=&gt;</span> <span class="i">$author</span>
  10 	<span class="s">}</span> <span class="k">grep</span> <span class="s">{</span> <span class="s">(</span><span class="q">/^$/</span> .. <span class="n">0</span><span class="s">)</span> &amp;&amp; <span class="q">/\S/</span> <span class="s">}</span>
  11 	<span class="q">&lt;FILE&gt;</span><span class="sc">;</span>
  12 
  13 <span class="k">my</span> <span class="i">%authors</span><span class="sc">;</span>
  14 <span class="k">foreach</span> <span class="k">my</span> <span class="i">$mod</span> <span class="s">(</span> <span class="k">values</span> <span class="i">%$hash_ref</span> <span class="s">)</span><span class="s">{</span>
  15   <span class="k">next</span> <span class="k">unless</span> <span class="i">$mod</span>-&gt;{<span class="w">type</span>} <span class="k">eq</span> <span class="q">&#39;module&#39;</span><span class="sc">;</span>
  16   <span class="k">my</span> <span class="i">%uses</span> = <span class="k">map</span> <span class="s">{</span> <span class="i">$_</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span> <span class="i">@</span>{ <span class="i">$mod</span>-&gt;{<span class="w">uses</span>} || <span class="s">[</span><span class="s">]</span> }<span class="sc">;</span>
  17 
  18   <span class="k">my</span> <span class="i">$key</span> = <span class="i">$mod</span>-&gt;{<span class="w">key</span>}<span class="sc">;</span>
  19   <span class="i">$key</span> =~ <span class="q">s#\.pm$##</span><span class="sc">;</span>
  20   <span class="i">$key</span> =~ <span class="q">s#/#::#g</span><span class="sc">;</span>
  21   <span class="k">my</span> <span class="i">$author</span> = <span class="i">$mod2author</span>{<span class="i">$key</span>} || <span class="q">&#39;unknown&#39;</span><span class="sc">;</span>
  22 
  23   <span class="i">$authors</span>{<span class="i">$author</span>} ||= <span class="s">{</span> <span class="w">author</span> <span class="cm">=&gt;</span> <span class="i">$author</span> <span class="s">}</span><span class="sc">;</span>
  24   <span class="i">$authors</span>{<span class="i">$author</span>}-&gt;{<span class="w">naughty</span>}++ <span class="k">if</span> ! <span class="s">(</span> <span class="i">$uses</span>{<span class="q">&#39;strict.pm&#39;</span>} || <span class="i">$uses</span>{<span class="q">&#39;warnings.pm&#39;</span>} <span class="s">)</span><span class="sc">;</span>
  25   <span class="i">$authors</span>{<span class="i">$author</span>}-&gt;{<span class="w">nice</span>}++    <span class="k">if</span>     <span class="i">$uses</span>{<span class="q">&#39;strict.pm&#39;</span>} &amp;&amp; <span class="i">$uses</span>{<span class="q">&#39;warnings.pm&#39;</span>}  <span class="sc">;</span>
  26 <span class="s">}</span>
  27 
  28 <span class="k">my</span> <span class="i">@naughty</span> = <span class="k">map</span> <span class="s">{</span> <span class="i">$_</span>-&gt;{<span class="w">author</span>} <span class="s">}</span> <span class="k">grep</span> <span class="s">{</span> <span class="i">$_</span>-&gt;{<span class="w">naughty</span>}                 <span class="s">}</span> <span class="k">values</span> <span class="i">%authors</span><span class="sc">;</span>
  29 <span class="k">my</span> <span class="i">@nice</span>    = <span class="k">map</span> <span class="s">{</span> <span class="i">$_</span>-&gt;{<span class="w">author</span>} <span class="s">}</span> <span class="k">grep</span> <span class="s">{</span> <span class="i">$_</span>-&gt;{<span class="w">nice</span>} &amp;&amp; ! <span class="i">$_</span>-&gt;{<span class="w">naughty</span>} <span class="s">}</span> <span class="k">values</span> <span class="i">%authors</span><span class="sc">;</span>
  30 <span class="k">print</span> <span class="q">&quot;Authors that have been nice (Red Ryder):\n&quot;</span><span class="cm">,</span> <span class="k">map</span> <span class="s">{</span><span class="q">&quot;\t$_\n&quot;</span> <span class="s">}</span> <span class="i">@nice</span><span class="sc">;</span>
  31 <span class="k">print</span> <span class="q">&quot;\n&quot;</span><span class="sc">;</span>
  32 <span class="k">print</span> <span class="q">&quot;Authors that have been naughty (coal):\n&quot;</span><span class="cm">,</span>   <span class="k">map</span> <span class="s">{</span><span class="q">&quot;\t$_\n&quot;</span> <span class="s">}</span> <span class="i">@naughty</span><span class="sc">;</span>
</pre>
<p><a name="footnote_cpantesters" id="footnote_cpantesters"></a>1. Elegantly displayed by the <a href="http://deps.cpantesters.org/?module=Pod%3A%3AAdvent&perl=any+version&os=any+OS">http://deps.cpantesters.org</a> service.<br>
</p>
<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">This module might also be useful in compiling a list to <a href="../10/">Bundle</a>.</blockquote>
<div style="float: right; font-size: 10pt"><a href="mod11.pod">View Source (POD)</a></div><br />
</body>
</html>
