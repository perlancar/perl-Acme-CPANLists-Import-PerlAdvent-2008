<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by Pod::Advent 0.14 (Pod::Simple 3.07, Perl::Tidy 20031021) on 2008-12-20 18:23:49 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2008 Perl Advent Calendar: Primed for Christmas</title>
<link rel="stylesheet" href="../style.css" type="text/css" />
<link rel="alternate" type="text/plain" href="mod2.pod" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2008-12</a>-02</h1>
<h2 align="center">Primed for Christmas</h2>
<h3 align="center">by Yanick Champoux</h3>
<p>Holiday evenings...</p>
<p>Outside, the cold darkness is speckled with snowflakes slowly drifting down on the covered ground. Inside, the air is warm and filled with delicious kitchen smells. Christmas music softly plays from the radio. A perfect time to curl up in one's favorite rocking chair by the fireplace and, armed with a mug full of pipping hot eggnog, leisurely attack one's favorite form of brain teaser, let it be crosswords, sudokus or... maybe something a little more mathematical?</p>
<p>My own puzzles of choice come from <a href="http://projecteuler.net">Project Euler</a>. The site provides a series of mathematical challenges that, once a correct way of tackling the problem has been found, can be solved by a program within one minute.</p>
<p>For example, the very first problem of the site is</p>
<blockquote>Find the sum of all the multiples of 3 or 5 below 1000.</blockquote>
<p>This is actually one of the easiest problems of the site and, after some minimal boolean logic juggling, can be solved by an elegant one-liner (can you find it before peeking at the code below?).</p>
<pre><span class="c">perl -MList::Util=sum -le 'print sum grep { not( $_ % 3 and $_ % 5 ) } 3 .. 999;'</span></pre>
<p>It hardly comes as a surprise that a lot of those problems deal with&mdash;directly or indirectly&mdash;prime numbers. And while one can always recompute those prime numbers over and over again for each problem, it's just no fun. After doing it a few times, I decided that it'd be much more efficient to keep a database of prime numbers that I could reuse between problems.</p>
<p>As luck has it <tt><a href="http://search.cpan.org/perldoc?Math::Prime::TiedArray">Math::Prime::TiedArray</a></tt> does exactly that. The module's API is very simple: tie an array to the module's class, and it will act as a virtual, infinite list of all primes. Of course, the array does not <span style="font-style: italic">really</span> hold all primes; it merely expand as needed. But that's okay, we're not greedy and that's more than enough to satisfy our needs. And, as a bonus, the module can also be called such that the computed primes are saved in file as well, ready to be retrieved and reused next time we need them.<sup><a href="#footnote_ed1">1</a></sup></p>
<p>Most of the time, though, we are more interested to know if a given arbitrary number is prime. This can easily be figured out via a helping function.<sup><a href="#footnote_ed2">2</a></sup></p>
<p>Now, with the help of <span style="font-weight: bold">Math::Prime::TiedArray</span> and the help function <span style="font-style: italic">is_prime()</span>, can you solve Project Euler's <a href="http://projecteuler.net/index.php?section=problems&id=35">problem 35</a>?</p>
<blockquote>The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
<p>There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</p>
How many circular primes are there below one million?</blockquote>
<p>The helper function follows.</p>
<a name="mod2.pl" id="mod2.pl"></a><h2><a href="mod2.pl">mod2.pl</a></h2><pre>
   1 <span class="s">{</span>   <span class="c">#Cuddled for closure</span>
   2     <span class="k">use</span> <span class="w">Math::Prime::TiedArray</span><span class="sc">;</span>
   3     <span class="k">tie</span> <span class="k">my</span> <span class="i">@primes</span><span class="cm">,</span> <span class="q">'Math::Prime::TiedArray'</span><span class="cm">,</span> <span class="w">cache</span> <span class="cm">=&gt;</span> <span class="q">&quot;primes.dbm&quot;</span><span class="sc">;</span>
   4 
<a name="is_prime"></a>   5     <span class="k">sub </span><span class="m">is_prime</span> <span class="s">{</span>
   6         <span class="k">my</span> <span class="i">$x</span> = <span class="k">shift</span><span class="sc">;</span>
   7 
   8         <span class="k">if</span> <span class="s">(</span> <span class="i">$x</span> &gt; <span class="i">$primes</span>[<span class="i">$#primes</span>] <span class="s">)</span> <span class="s">{</span>
   9 
  10             <span class="c"># $x outside of the range of primes</span>
  11             <span class="c"># already found</span>
  12 
  13             <span class="k">my</span> <span class="i">$i</span> = <span class="n">0</span><span class="sc">;</span>
  14             <span class="k">while</span> <span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="s">{</span>
  15                 <span class="k">my</span> <span class="i">$p</span> = <span class="i">$primes</span>[ <span class="i">$i</span>++ ]<span class="sc">;</span>    <span class="c"># will magically grow as needed!</span>
  16                 <span class="k">return</span> <span class="n">1</span> <span class="k">if</span> <span class="i">$p</span> &gt; <span class="k">sqrt</span> <span class="i">$x</span><span class="sc">;</span>
  17                 <span class="k">return</span> <span class="n">0</span> <span class="k">unless</span> <span class="i">$x</span> % <span class="i">$p</span><span class="sc">;</span>
  18             <span class="s">}</span>
  19         <span class="s">}</span>
  20 
  21         <span class="c"># $x inside the range of primes already found</span>
  22         <span class="c"># we try to find it with a binary search</span>
  23 
  24         <span class="k">my</span> <span class="i">$min</span> = <span class="n">0</span><span class="sc">;</span>
  25         <span class="k">my</span> <span class="i">$max</span> = <span class="i">$#primes</span><span class="sc">;</span>
  26 
  27         <span class="k">while</span> <span class="s">(</span> <span class="i">$min</span> &lt;= <span class="i">$max</span> <span class="s">)</span> <span class="s">{</span>
  28             <span class="k">my</span> <span class="i">$middle</span> = <span class="k">int</span> <span class="i">$min</span> + <span class="s">(</span> <span class="i">$max</span> - <span class="i">$min</span> <span class="s">)</span> / <span class="n">2</span><span class="sc">;</span>
  29 
  30             <span class="c"># ah AH! found it. it's a prime</span>
  31             <span class="k">return</span> <span class="n">1</span> <span class="k">if</span> <span class="i">$primes</span>[<span class="i">$middle</span>] == <span class="i">$x</span><span class="sc">;</span>
  32 
  33             <span class="k">if</span> <span class="s">(</span> <span class="i">$primes</span>[<span class="i">$middle</span>] &lt; <span class="i">$x</span> <span class="s">)</span> <span class="s">{</span>
  34                 <span class="i">$min</span> = <span class="i">$middle</span> + <span class="n">1</span><span class="sc">;</span>
  35             <span class="s">}</span>
  36             <span class="k">else</span> <span class="s">{</span>
  37                 <span class="i">$max</span> = <span class="i">$middle</span> - <span class="n">1</span><span class="sc">;</span>
  38             <span class="s">}</span>
  39         <span class="s">}</span>
  40 
  41         <span class="k">return</span> <span class="n">0</span><span class="sc">;</span>    <span class="c"># not found in list, so not a prime</span>
  42     <span class="s">}</span>
  43 
  44 <span class="s">}</span>
</pre>
<p><a name="footnote_ed1" id="footnote_ed1"></a>1. &nbsp;<br>
</p>
<blockquote>Similar results could be had with <a href="../../2000/18/">Memoize</a>. &mdash;the management</blockquote>
<p><a name="footnote_ed2" id="footnote_ed2"></a>2. &nbsp;<br>
</p>
<blockquote>Using <tt><a href="http://search.cpan.org/perldoc?List::Search">List::Search</a></tt>::<tt><span class="i">nlist_contains</span><span class="s">(</span><span class="i">$x</span><span class="cm">,</span>\<span class="i">@primes</span><span class="s">)</span></tt> would simplify the logic by not rewriting binary search. &mdash;the management</blockquote>
<div style="float: right; font-size: 10pt"><a href="mod2.pod">View Source (POD)</a></div><br />
</body>
</html>
